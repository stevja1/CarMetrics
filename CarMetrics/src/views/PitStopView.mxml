<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:js="org.jaredstevens.components.*"
		currentState="portrait"
		title="Pit Stop"
		viewActivate="this.initializeView()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<js:DatePicker id="datePicker" />
	</fx:Declarations>
	<s:layout>
		<s:ConstraintLayout>
			<s:constraintRows>
				<s:ConstraintRow id="row0" height="1%" />
				<s:ConstraintRow id="row1" height="10%" />
				<s:ConstraintRow id="row2" height="10%" />
				<s:ConstraintRow id="row3" height="10%" />
				<s:ConstraintRow id="row4" height="10%" />
				<s:ConstraintRow id="row5" height="10%" />
				<s:ConstraintRow id="row6" height="48%" />
				<s:ConstraintRow id="row7" height="1%" />
			</s:constraintRows>
			<s:constraintColumns>
				<s:ConstraintColumn id="col0" width="5%" />
				<s:ConstraintColumn id="col1" width="30%" />
				<s:ConstraintColumn id="col2" width="60%" />
				<s:ConstraintColumn id="col3" width="5%" />
			</s:constraintColumns>
		</s:ConstraintLayout>
	</s:layout>

	<s:states>
		<s:State name="portrait" />
		<s:State name="landscape" />
	</s:states>
	
	<s:Label height="50" text="Odometer" verticalAlign="middle" textAlign="right"
			 top.portrait="row1:5" bottom.portrait="row1:5" right.portrait="col1:5"
			 />
	<s:TextInput id="mileageInput" autoCorrect="false" change="this.formatNumberField( event )"
				 restrict="0-9.," softKeyboardType="number" textAlign="right"
				 top.portrait="row1:5" left.portrait="col2:0" bottom.portrait="row1:5" right="col2:0"
				 />

	<s:Label height="50" text="Price/Gallon" verticalAlign="middle" textAlign="right"
			 top.portrait="row2:5" bottom.portrait="row2:5" right.portrait="col1:5"
			 />
	<s:TextInput id="costInput" autoCorrect="false" change="this.formatFractionField( event )"
				 restrict="0-9.," softKeyboardType="number" textAlign="right"
				 top.portrait="row2:5" left.portrait="col2:0" bottom.portrait="row2:5" right="col2:0"
				 />

	<s:Label height="50" text="Fuel Pumped" verticalAlign="middle" textAlign="right"
			 top.portrait="row3:5" bottom.portrait="row3:5" right.portrait="col1:5"
			 />
	<s:TextInput id="fuelInput" autoCapitalize="none" autoCorrect="false"
				 change="this.formatFractionField( event )" restrict="0-9.,"
				 softKeyboardType="number" textAlign="right"
				 top.portrait="row3:5" left.portrait="col2:0" bottom.portrait="row3:5" right="col2:0"
				 />
	
	<s:Label height="50" text="Date" verticalAlign="middle" textAlign="right"
			 top.portrait="row4:5" bottom.portrait="row4:5" right.portrait="col1:5"
			 />
	<s:Label id="dateDisplay" text="{this.formatDate(this.date)}" textDecoration="underline"
			 height="50" verticalAlign="middle" textAlign="right"
			 top.portrait="row4:5" bottom.portrait="row4:5" left.portrait="col2:0" right.portrait="col2:0"
			 click="this.showDatePicker( event )"
			 />
	<s:HGroup
		top.portrait="row5:5" left.portrait="col1:0" bottom.portrait="row5:5" right.portrait="col2:0">
		<s:Button height="100%" width="100%" label="Save" click="this.saveRecord()"
				  />
		<s:Button id="deleteButton" height="100%" width="100%" label="Delete" click="this.deleteRecord()"
				  />
		<s:Button height="100%" width="100%" label="Back" click="this.navigator.popToFirstView()"
				  />
	</s:HGroup>
	<js:PitStopDisplay id="recordsView" includeInLayout="false" visible="false"
					   top.portrait="row6:5" left="col1:0" bottom.portrait="row6:20" right="col2:0"
		/>
		
	<fx:Script>
		<![CDATA[
			import flash.sensors.Geolocation;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.jaredstevens.components.DatePicker;
			import org.jaredstevens.components.PitStopDisplay;
			import org.jaredstevens.components.PitStopDisplayItem;
			import org.jaredstevens.db.MileageDAO;
			import org.jaredstevens.db.TransactionDAO;
			import org.jaredstevens.events.PitStopItemClick;
			import org.jaredstevens.utils.Utils;
			import org.jaredstevens.valueobjects.MileageRecord;
			
			import spark.components.DateSpinner;
			import spark.events.PopUpEvent;
			import spark.events.TextOperationEvent;
			import spark.formatters.DateTimeFormatter;
			import spark.formatters.NumberFormatter;
			
			[Bindable]
			private var date:Date;
			private var selectedRecordId:int;
			private var selectedRecordServerId:int;
			private var geo:Geolocation; 

			
			private function addDelayedElements():void
			{
				this.recordsView.visible = true;
				this.recordsView.includeInLayout = true;
			}
			
			private function applyLayout():void
			{
				
			}
			
			private function showDatePicker( e:MouseEvent ):void
			{
				if( this.datePicker == null )
				{
					this.datePicker = new DatePicker();
				}
				this.datePicker.date = this.date;
				this.datePicker.open(this, true);
				PopUpManager.centerPopUp( this.datePicker );
				this.datePicker.addEventListener( PopUpEvent.CLOSE,
					function ( e:PopUpEvent ):void
					{
						date = datePicker.date;
						removeEventListener( PopUpEvent.CLOSE, arguments.callee );
					}
				);
			}
			
			private function initializeView():void
			{
				this.addDelayedElements();
				var today:Date = new Date();
				this.date = today;
				this.selectedRecordId = -1;
				this.deleteButton.enabled = false;
				
				if( this.data.id > 0 )
				{
					this.getRecords();
				} else this.navigator.popView();
				this.recordsView.addEventListener( PitStopItemClick.ITEM_CLICKED, this.getRecord );
				this.focusManager.setFocus( this.mileageInput );
			}
			
			private function formatDate( inDate:Date ):String
			{
				var dateFormatter:DateTimeFormatter = new DateTimeFormatter();
				dateFormatter.dateTimePattern = "d MMM. yyyy";
				return dateFormatter.format( inDate );
			}
			
			private function getRecords():void
			{
				this.data.mileageDAO.getRecords( this.data.id, null, null, this.displayRecords );
			}
			
			private function displayRecords( e:SQLEvent ):void
			{
				var results:SQLResult = e.target.getResult();
				if( results.data != null )
				{
					this.recordsView.clear();
					var record:MileageRecord = null;
					for( var index:String in results.data )
					{
						record = MileageDAO.recordFactory( results.data[index] );
						this.recordsView.addItem( record );
					}
				}
				else
					this.recordsView.clear();
			}
			
			private function queryLocation(callback:Function):void {
				if (Geolocation.isSupported) { 
					this.geo = new Geolocation();
					if(!this.geo.muted) {
						this.geo.setRequestedUpdateInterval(200);
						this.geo.addEventListener(GeolocationEvent.UPDATE, callback);
					}
				} 
			}
			
			private function saveRecord():void
			{
				var date:Date = this.date;
				var fuelVolume:String = this.fuelInput.text;
				var mileage:String = this.mileageInput.text;
				var cost:String = this.costInput.text;
				
				// Strip formatting
				fuelVolume = fuelVolume.replace(/,/g, '');
				mileage = mileage.replace(/,/g, '');
				cost = cost.replace(/,/g, '');
				
				this.queryLocation(function(e:GeolocationEvent):void {
					var lat:Number = e.latitude;
					var long:Number = e.longitude;
					var accuracy:Number = e.horizontalAccuracy;
					// @todo Log location in database somehow
					
					if(accuracy < 30) {
						var record:MileageRecord = new MileageRecord( selectedRecordId, selectedRecordServerId, data.id, date, parseFloat(fuelVolume), parseInt(mileage), parseFloat(cost), lat, long);
						data.mileageDAO.savePitStop( record, pitStopSaved );
						e.currentTarget.removeEventListener(e.type, arguments.callee);
					}
				});
			}
			
			private function pitStopSaved( e:SQLEvent ):void
			{
				var result:SQLResult = e.target.getResult();
				var affectedId:Number;
				var action:String;
				if(result.lastInsertRowID > 0)
					affectedId = result.lastInsertRowID;
				else
					affectedId = e.target.parameters["@mileageId"];
				action = TransactionDAO.SAVE;
				this.data.transactionDAO.addTransaction("mileage", affectedId, this.selectedRecordServerId, action, null);
				this.getRecords();
				this.selectedRecordId = -1;
				this.clearForm();
			}
			
			private function deleteRecord():void
			{
				if( this.selectedRecordId > 0 )
					this.data.mileageDAO.deletePitStop( this.selectedRecordId, deleteResponse );
				this.clearForm();
			}

			private function deleteResponse( e:SQLEvent ):void
			{
				// No need to create a delete transaction for a record that never made it to the server
				if(this.selectedRecordServerId < 1) return;
				var affectedId:Number = e.target.parameters["@mileageId"];
				var action:String = TransactionDAO.DELETE;
				this.data.transactionDAO.addTransaction("mileage", affectedId, this.selectedRecordServerId, action, null);
				this.selectedRecordId = -1;
				this.getRecords();
			}
			
			private function getRecord( e:PitStopItemClick ):void
			{
				this.selectedRecordId = e.recordId;
				this.deleteButton.enabled = true
				this.data.mileageDAO.getRecord( e.recordId, this.populateForm );
			}
			
			private function populateForm( e:SQLEvent ):void
			{
				var formatter:NumberFormatter = new NumberFormatter();
				formatter.fractionalDigits = 3;
				formatter.trailingZeros = true;

				var results:SQLResult = e.target.getResult();
				if( results.data != null )
				{
					var record:MileageRecord = MileageDAO.recordFactory( results.data[0] );
					this.fuelInput.text = formatter.format( record.fuelVolume );
					this.mileageInput.text = Utils.formatNumberField( String( record.odometer ), false );
					this.costInput.text = formatter.format( record.fuelPrice );
					this.date = record.date;
					this.selectedRecordServerId = record.serverId;
				}
			}
			
			private function clearForm():void
			{
				this.selectedRecordId = 0;
				this.selectedRecordServerId = 0;
				this.fuelInput.text = "";
				this.mileageInput.text = "";
				this.costInput.text = "";
				var today:Date = new Date();
				this.date = today;
				this.deleteButton.enabled = false;
			}
			
			/**
			 * As the user enters numbers into the text field, format the number and automatically add a decimal place.
			 * @param e:TextOperationEvent The event fired by the text field during a change event.
			 * @return void
			 */
			private function formatNumberField( e:TextOperationEvent ):void
			{
//				var text:String = e.currentTarget.text;
//				var result:String = Utils.formatNumberField( text, false );
//				if( result == "0" ) result = "";
				/*
				e.currentTarget.text = result;
				e.currentTarget.selectRange( e.currentTarget.text.length, e.currentTarget.text.length);
				*/
			}
			
			private function formatFractionField( e:TextOperationEvent ):void
			{
//				var text:String = e.currentTarget.text;
//				var result:String = Utils.formatNumberField( text );
//				if( result == "0" ) result = "";
				/*
				e.currentTarget.text = result;
				e.currentTarget.selectRange( e.currentTarget.text.length, e.currentTarget.text.length);
				*/
			}
		]]>
	</fx:Script>
</s:View>
